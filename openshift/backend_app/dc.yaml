apiVersion: apps.openshift.io/v1                                                                                                    #для Openshift v3.11 apiVersion должна быть v1                                                                                                             
kind: DeploymentConfig
metadata:
   labels:
     app: test-app-backend                                                                                                              #заменить на имя вашего сервиса. должно однозначно идентифицировать ваш сервис.
   name: 'test-app-backend'                                                                                  #заменить на имя вашего сервиса. должно однозначно идентифицировать ваш сервис. Параметр ${distrib.release.version} оставить, если ваш сервис версионируется через Api GateWay И на среде может быть установлено несколько релизов сервиса в моменте                                                                                   
spec:
  replicas: 1                                                                      #Параметр, который отвечает за количество запущенных реплик сервиса в случае если не настроен автоскелйинг. здесь нужно сослаться на параметр, который вынести в конфиг сервиса в config/parameters/<конфиг сервиса>.conf, потому что это значение может отличаться от среды к среде. Имя параметра можете придумать на своё усмотрение. В данном конкретном случае, мы использовали тот же параметр, что и для минимального количества реплик автоскейлера, а можно было создать и отдельный параметр.
  revisionHistoryLimit: 2                                                                                                           #Количество хранимых старых реплик. Оставить именно так как в данном примере
  selector:
    distrib-version: '${jenkins_env.fp_artifact_version}'                                                                           #нужно обязательно оставить именно так как в данном примере, это необходимо для логик работы скриптов развертывания                                                                                          #нужно обязательно оставить именно так как в данном примере, это необходимо для логик работы скриптов развертывания
  strategy:
    activeDeadlineSeconds: 21600
    resources: {}
    rollingParams:                                                                                                                  #Для нижеописанных rollingParams нужно сослаться на параметры, которые вынести в конфиг сервиса в config/parameters/<конфиг сервиса>.conf, те, в свою очередь, должны ссылаться на глобальные параметры.
      intervalSeconds: 1                                                                    #время ожидания между опросом состояния деплоймента после обновления. Название глобального параетра, на который ссылается переменная: global.ufs.strategy.intervalSeconds  
      maxSurge: 50%                                                                                  #это максимальное число подов, которые могут быть запланированы выше исходного количества подов. Название глобального параетра, на который ссылается переменная: global.ufs.strategy.maxSurge
      maxUnavailable: 50%                                                                     #это максимальное количество подов, которые могут быть недоступны во время обновления. Название глобального параетра, на который ссылается переменная: global.ufs.strategy.maxUnavailable
      timeoutSeconds: 300                                                                      #время ожидания поднятия подов, прежде чем сдаться и откатится к предыдущему успешному деплойменту. Название глобального параетра, на который ссылается переменная: global.ufs.strategy.timeoutSeconds
      updatePeriodSeconds: 1                                                            #время ожидания между отдельными обновлениями пода. Название глобального параетра, на который ссылается переменная: global.ufs.strategy.updatePeriodSeconds
    type: Rolling
  template:
    metadata:
      labels:
        distrib-version: '${build: jenkins_env.fp_artifact_version}'                                                                       #нужно обязательно оставить именно так как в данном примере, это необходимо для логик работы скриптов развертывания и чтобы OpenShift мог связать создаваемые POD'ы с данным конфигом деплоя (типа лейблы здесь и в секции выше одинаковые)                                                                                       #нужно обязательно оставить именно так как в данном примере, это необходимо для логик работы скриптов развертывания и чтобы OpenShift мог связать создаваемые POD'ы с данным конфигом деплоя (типа лейблы здесь и в секции выше одинаковые)
    spec:
      containers:
        - image: '${dockerRegistry}/efs-dev/ci01976100/ci02210881_as_efs_devops_pipeline_dev/backend_app@${build: jenkins_env.backend_app.fp_image_hash}'   #в данном поле указывается параметризированный адрес до образа, из которого будет разввертываться сервис. Параметром dockerRegistry параметризируется адрес nexus 3 (он же реджистри, в который вы на этапе CI выкладываете собираемые образы), а параметром fp_image_hash параметризируется хэш образа - этот номер будет подставлен типовой JOB CI при сборке образов и дистрибутива. Вам нужно в этой строке только поменять адрес репозитория на тот, который вы получите в шаге 0. А "security-bh" заменить на application_name из distrib.yaml или на имя папки с сервисом из папки config/openshift вашего репозитория
          imagePullPolicy: Always
          #envFrom:                                                                                                              #в данной секции описываются подключаемые к POD'ам конфигмэпы (сущности с параметрыми среды, которые генерятся на основании конфигов из config/parameters/<имя сервиса>.conf
          #- configMapRef:
          #    name: ufs-security.conf                                                                                           #укажите здесь имя файла конфига, который необходим данному сервису (т.е. того конфига, параметрами которого вы параметризировали standalone.xml сервера WF данного сервиса). Если в имени файла конфига есть "_" - замените его на ".".
          #- secretRef:
          #    name: secret-${fpi-name}.${distrib.release.version}                                                               #обязательно в последнюю очередь подключите этот secretRef. в нем в POD передаются все пароли и прочая чувствительные параметры среды
          #name: 'test-app-backend-${distrib.release.version}'                                                                       #сделать так же, как в поле metadata.name выше в данном конфиге                                                
          name: test-app-backend
          ports:
          - containerPort: 8080
            protocol: TCP
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health/check                                                                           #указать корректный адрес до реста /environment/product вашего сервиса. в данном случае он служит здесь как liveness проба
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 180
            periodSeconds: 1
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:                                                                                                          
            failureThreshold: 3
            httpGet:
              path: /health/check                                                                                   #указать корректный адрес до реста /healthcheck вашего сервиса. в данном случае он служит здесь как readiness проба
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 1
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            limits:
              cpu: 100m               #здесь и ниже нужно ссослаться на параметры, который вынести в конфиг сервиса в config/parameters/<конфиг сервиса>.conf, потому что это значение может отличаться от среды к среде. Имя параметра можете придумать на своё усмотрение
              memory: 100Mi                                                                            #
            requests:
              cpu: 50m                                                                         #Важно: в самом значении параметра (в конфиг файле config/parameters/<конфиг сервиса>.conf) указывать ресурс CPU нужно в формате [0-9]m, например, 1 CPU = 1000m. Суммарное значение cpuLimit и cpuRequest не должно превышать 1 CPU.
              memory: 50Mi                                                                      #Важно: в самом значении параметра указывать ресурс MEM нужно в формате [0-9]Mi, например, 1 Gb= 1024Mi
          terminationMessagePath: /dev/termination-log
          #volumeMounts:
          #  - mountPath: '/opt/jboss/wildfly/ssl/dir1/'                                                                         #Если вы используете MQ (аудита, журналирования, мониторинга), то вот здесь нужно подмонтировать хранилище с сертификатом для работы с MQ. В этом параметре указывается в какую директорию внутри контейнера подмонтировать. именно в ней в контейнере появится файл mq.jks
          #    name: ufs-mq-jks-vol                                                                                              #через этот параметр идёт связь с монтируемым вольюмом. а сам вольюм по этому имени описывается чуть ниже
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      securityContext: {}
      terminationGracePeriodSeconds: 30                                    #таймаут для корректного завершения пода
      #volumes:
      #  - name: ufs-mq-jks-vol                                                                                                  #вот описание\параметры того самого вольюма, который монтируется к контейнеру выше.
      #    secret:
      #      defaultMode: 420                                                                                                    #не изменять
      #      secretName: 'mq.jks'                                                                                                #не изменять. здесь указано, что в вольюм будет положен файлик с хранилщем сертификатом, который лежит на уровне проекта в секрете с именем mq.jks. Этот файлик со среды туда положит инсталлятор во время деплоя.
  triggers:
  - type: ConfigChange
